#!/usr/bin/env node

const { IntervalManager } = require('./services/interval-manager');
const { StateManager } = require('./services/state-manager');
const config = require('./optimized-config');
const { logMemoryUsage } = require('./services/logger');

async function testOptimizations() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Light Phone Bridge\n');

  // –¢–µ—Å—Ç 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
  console.log(`   ‚úÖ –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${config.intervals.base / 1000 / 60} –º–∏–Ω—É—Ç`);
  console.log(`   ‚úÖ –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º: ${config.nightMode.startHour}:00-${config.nightMode.endHour}:00`);
  console.log(`   ‚úÖ Puppeteer –∞—Ä–≥—É–º–µ–Ω—Ç—ã: ${config.puppeteer.launchOptions.args.length} –æ–ø—Ü–∏–π`);
  console.log();

  // –¢–µ—Å—Ç 2: –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
  console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IntervalManager:');
  const intervalManager = new IntervalManager(config);
  
  // –¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
  const testScenarios = [
    { name: '–î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è, –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', state: { emptyChecksCount: 0 } },
    { name: '–ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', state: { lastActivity: Date.now() - 30 * 60 * 1000 } },
    { name: '–ú–Ω–æ–≥–æ –ø—É—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫', state: { emptyChecksCount: 10 } },
    { name: '–ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è', state: { emptyChecksCount: 0 }, hour: 2 }
  ];

  testScenarios.forEach(scenario => {
    let originalGetHours;
    
    // –ü–æ–¥–º–µ–Ω—è–µ–º —á–∞—Å –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if (scenario.hour !== undefined) {
      originalGetHours = Date.prototype.getHours;
      Date.prototype.getHours = () => scenario.hour;
    }

    const interval = intervalManager.getCurrentInterval(scenario.state);
    const minutes = Math.round(interval / 1000 / 60);
    console.log(`   üìä ${scenario.name}: ${minutes} –º–∏–Ω—É—Ç (${intervalManager.getLastReason()})`);

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    if (scenario.hour !== undefined && originalGetHours) {
      Date.prototype.getHours = originalGetHours;
    }
  });
  console.log();

  // –¢–µ—Å—Ç 3: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
  console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ StateManager:');
  const stateManager = new StateManager('./test-cache.json');
  
  console.log('   ‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
  await stateManager.loadState();
  
  console.log('   üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  stateManager.updateState({
    totalChecks: 42,
    totalNotesProcessed: 7,
    emptyChecksCount: 3
  });
  
  console.log('   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...');
  await stateManager.saveState();
  
  const stats = stateManager.getStatistics();
  console.log(`   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.totalChecks} –ø—Ä–æ–≤–µ—Ä–æ–∫, ${stats.totalNotesProcessed} –∑–∞–º–µ—Ç–æ–∫`);
  console.log();

  // –¢–µ—Å—Ç 4: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
  console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏:');
  const memoryBefore = logMemoryUsage('test:before');
  
  // –°–æ–∑–¥–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –ø–∞–º—è—Ç—å
  const testArray = new Array(1000000).fill('test');
  const memoryAfter = logMemoryUsage('test:after');
  
  console.log(`   üìà –ü–∞–º—è—Ç—å –¥–æ: ${memoryBefore.rss}MB`);
  console.log(`   üìà –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ: ${memoryAfter.rss}MB`);
  console.log(`   üìä –†–∞–∑–Ω–∏—Ü–∞: ${memoryAfter.rss - memoryBefore.rss}MB`);
  console.log();

  // –¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
  console.log('5Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö 5 –ø—Ä–æ–≤–µ—Ä–æ–∫:');
  const currentState = { emptyChecksCount: 2, lastActivity: Date.now() - 2 * 60 * 60 * 1000 };
  const nextIntervals = intervalManager.simulateNextIntervals(currentState, 5);
  
  nextIntervals.forEach(interval => {
    const time = new Date(interval.estimatedTime).toLocaleTimeString();
    console.log(`   ‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ ${interval.checkNumber}: ${interval.intervalMinutes} –º–∏–Ω (${time}) - ${interval.reason}`);
  });
  console.log();

  // –¢–µ—Å—Ç 6: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  console.log('6Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
  const suggestions = intervalManager.getOptimizationSuggestions(currentState);
  
  if (suggestions.length === 0) {
    console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ');
  } else {
    suggestions.forEach(suggestion => {
      const icon = suggestion.type === 'warning' ? '‚ö†Ô∏è' : 
                   suggestion.type === 'optimization' ? 'üîß' : '‚ÑπÔ∏è';
      console.log(`   ${icon} ${suggestion.message}`);
    });
  }
  console.log();

  // –¢–µ—Å—Ç 7: –û—Ü–µ–Ω–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
  console.log('7Ô∏è‚É£ –û—Ü–µ–Ω–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤:');
  
  const oldInterval = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã - —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
  const newInterval = config.intervals.base; // 5 –º–∏–Ω—É—Ç - –Ω–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π
  
  const dailyChecksOld = (24 * 60 * 60 * 1000) / oldInterval;
  const dailyChecksNew = (24 * 60 * 60 * 1000) / newInterval;
  
  const reduction = Math.round(((dailyChecksOld - dailyChecksNew) / dailyChecksOld) * 100);
  
  console.log(`   üìä –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤ –¥–µ–Ω—å (—Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º): ${dailyChecksOld}`);
  console.log(`   üìä –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤ –¥–µ–Ω—å (–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º): ${dailyChecksNew}`);
  console.log(`   üìâ –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏: ${reduction}%`);
  
  const memorySavings = Math.round((1000 - 250) / 1000 * 100); // –° 1GB –¥–æ 250MB
  console.log(`   üíæ –≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏: ~${memorySavings}%`);
  
  const costSavings = Math.round((10 - 5) / 10 * 100); // –° $10 –¥–æ $5
  console.log(`   üí∞ –≠–∫–æ–Ω–æ–º–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏: ~${costSavings}%`);
  console.log();

  console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  console.log('üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
  
  // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
  try {
    const fs = require('fs');
    fs.unlinkSync('./test-cache.json');
  } catch (e) {
    // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  testOptimizations().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error);
    process.exit(1);
  });
}

module.exports = { testOptimizations }; 