// –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ worker
require('dotenv').config();

const config = require('./optimized-config');
const { readUsers } = require('./services/users');
const { OptimizedLightPhoneService } = require('./services/lightphone-optimized');

async function testOptimizedWorker() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ worker –ª–æ–∫–∞–ª—å–Ω–æ...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('\nüìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
    console.log(`  ‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${Math.round(config.intervals.base / 1000 / 60)} –º–∏–Ω—É—Ç`);
    console.log(`  ‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: ${Math.round(config.intervals.accelerated / 1000 / 60)} –º–∏–Ω—É—Ç`);
    console.log(`  ‚Ä¢ –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º: ${Math.round(config.intervals.night / 1000 / 60)} –º–∏–Ω—É—Ç`);
    console.log(`  ‚Ä¢ Puppeteer headless: ${config.puppeteer.launchOptions.headless}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const allUsers = readUsers();
    console.log(`\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}`);
    
    const activeUsers = allUsers.filter(u => 
        u.settings?.lightPhoneEmail && 
        u.settings?.lightPhonePassword &&
        process.env.CLAUDE_API_KEY
    );
    
    console.log(`üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${activeUsers.length}`);
    
    if (activeUsers.length === 0) {
        console.log('\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        console.log('üìù –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
        console.log('   1. –í data/users.json –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ lightPhoneEmail –∏ lightPhonePassword');
        console.log('   2. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è CLAUDE_API_KEY');
        console.log('\nüí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: node create-test-user.js');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('\nüîë –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log(`  ‚Ä¢ CLAUDE_API_KEY: ${process.env.CLAUDE_API_KEY ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`  ‚Ä¢ NODE_ENV: ${process.env.NODE_ENV || 'development'}`);
    console.log(`  ‚Ä¢ OPTIMIZED_MODE: ${process.env.OPTIMIZED_MODE || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    
    if (!process.env.CLAUDE_API_KEY) {
        console.log('\n‚ùå CLAUDE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        console.log('üìù –î–æ–±–∞–≤—å—Ç–µ –≤ —Ñ–∞–π–ª .env: CLAUDE_API_KEY=your_key_here');
        return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å Light Phone
    console.log('\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OptimizedLightPhoneService...');
    const service = new OptimizedLightPhoneService(config.puppeteer);
    
    try {
        console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞...');
        await service.initialize();
        console.log('‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞
        const testUser = activeUsers[0];
        console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${testUser.email}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º Claude API –∫–ª—é—á
        if (!testUser.settings.claudeApiKey) {
            testUser.settings.claudeApiKey = process.env.CLAUDE_API_KEY;
        }
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–º–µ—Ç–æ–∫...');
        const startTime = Date.now();
        
        const result = await service.checkNotes(testUser);
        
        const duration = Date.now() - startTime;
        
        console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ (${duration}ms):`);
        console.log(`  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${result.success ? '‚úÖ' : '‚ùå'}`);
        console.log(`  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: ${result.notes ? result.notes.length : 0}`);
        console.log(`  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.processedCount || 0}`);
        console.log(`  ‚Ä¢ –û—à–∏–±–∫–∏: ${result.errors.length}`);
        
        if (result.notes && result.notes.length > 0) {
            console.log('\nüìã –ó–∞–º–µ—Ç–∫–∏:');
            result.notes.forEach((note, index) => {
                const status = note.needsProcessing ? 'üî• —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏' : 'üìù –æ–±—ã—á–Ω–∞—è';
                console.log(`  ${index + 1}. ${note.title.substring(0, 50)}... (${status})`);
            });
        }
        
        if (result.errors.length > 0) {
            console.log('\n‚ùå –û—à–∏–±–∫–∏:');
            result.errors.forEach(error => {
                console.log(`  ‚Ä¢ ${error}`);
            });
        }
        
        if (result.error) {
            console.log(`\nüí• –û—Å–Ω–æ–≤–Ω–∞—è –æ—à–∏–±–∫–∞: ${result.error}`);
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
        if (result.memoryUsage) {
            const rss = Math.round(result.memoryUsage.rss / 1024 / 1024);
            const heap = Math.round(result.memoryUsage.heapUsed / 1024 / 1024);
            console.log(`\nüíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: RSS ${rss}MB, Heap ${heap}MB`);
        }
        
    } catch (error) {
        console.error('\nüí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        console.error(error.stack);
    } finally {
        console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞...');
        await service.cleanup();
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
    if (activeUsers.length > 0) {
        console.log('\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ worker –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
        console.log('   npm run start:optimized');
        console.log('\nüåê –î–ª—è Railway –¥–µ–ø–ª–æ—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
        console.log('   OPTIMIZED_MODE=true');
        console.log('   CLAUDE_API_KEY=your_key_here');
    }
}

if (require.main === module) {
    testOptimizedWorker().catch(console.error);
}

module.exports = { testOptimizedWorker }; 