const fs = require('fs').promises;
const path = require('path');

class StateManager {
  constructor(cacheFilePath) {
    this.cacheFilePath = cacheFilePath;
    this.state = {
      lastActivity: null,      // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏)
      lastCheck: null,         // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      emptyChecksCount: 0,     // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥—Ä—è–¥
      totalChecks: 0,          // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
      totalNotesProcessed: 0,  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
      pageHash: null,          // –•–µ—à –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      userNoteStates: {},      // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      lastCleanup: null        // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
    };
  }

  async loadState() {
    try {
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const dir = path.dirname(this.cacheFilePath);
      await fs.mkdir(dir, { recursive: true });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
      const data = await fs.readFile(this.cacheFilePath, 'utf8');
      const savedState = JSON.parse(data);
      
      // –ú–µ—Ä–∂–∏–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
      this.state = { ...this.state, ...savedState };
      
      console.log(`üìÇ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${Object.keys(this.state).length} –ø–æ–ª–µ–π`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      if (this.state.totalChecks > 0) {
        const lastActivity = this.state.lastActivity ? 
          new Date(this.state.lastActivity).toLocaleString() : '–Ω–∏–∫–æ–≥–¥–∞';
        const lastCheck = this.state.lastCheck ? 
          new Date(this.state.lastCheck).toLocaleString() : '–Ω–∏–∫–æ–≥–¥–∞';
          
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ü—Ä–æ–≤–µ—Ä–æ–∫ ${this.state.totalChecks}, –∑–∞–º–µ—Ç–æ–∫ ${this.state.totalNotesProcessed}`);
        console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivity}`);
        console.log(`üîç –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${lastCheck}`);
        console.log(`üö´ –ü—É—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–¥—Ä—è–¥: ${this.state.emptyChecksCount}`);
      }
      
    } catch (error) {
      if (error.code === 'ENOENT') {
        console.log('üìÇ –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π');
      } else {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error.message);
        console.log('üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
      }
    }
  }

  async saveState() {
    try {
      const dir = path.dirname(this.cacheFilePath);
      await fs.mkdir(dir, { recursive: true });
      
      // –î–æ–±–∞–≤–ª—è–µ–º timestamp —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const stateToSave = {
        ...this.state,
        lastSaved: Date.now()
      };
      
      await fs.writeFile(this.cacheFilePath, JSON.stringify(stateToSave, null, 2));
      console.log('üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error.message);
    }
  }

  getState() {
    return { ...this.state };
  }

  updateState(updates) {
    this.state = { ...this.state, ...updates };
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∑–∞–º–µ—Ç–æ–∫
  getUserNoteState(userId) {
    return this.state.userNoteStates[userId] || {};
  }

  updateUserNoteState(userId, noteId, snippet) {
    if (!this.state.userNoteStates[userId]) {
      this.state.userNoteStates[userId] = {};
    }
    this.state.userNoteStates[userId][noteId] = {
      snippet,
      lastProcessed: Date.now()
    };
  }

  hasUserNoteChanged(userId, noteId, currentSnippet) {
    const userState = this.getUserNoteState(userId);
    const savedNote = userState[noteId];
    
    if (!savedNote) {
      return true; // –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞
    }
    
    return savedNote.snippet !== currentSnippet;
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  async cleanup() {
    const now = Date.now();
    const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π
    
    let cleanedCount = 0;
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
    for (const userId in this.state.userNoteStates) {
      const userNotes = this.state.userNoteStates[userId];
      
      for (const noteId in userNotes) {
        const note = userNotes[noteId];
        if (now - note.lastProcessed > maxAge) {
          delete userNotes[noteId];
          cleanedCount++;
        }
      }
      
      // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (Object.keys(userNotes).length === 0) {
        delete this.state.userNoteStates[userId];
      }
    }
    
    this.state.lastCleanup = now;
    
    if (cleanedCount > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞–º–µ—Ç–æ–∫`);
      await this.saveState();
    }
    
    return cleanedCount;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –æ—á–∏—Å—Ç–∫–∞
  shouldCleanup() {
    const lastCleanup = this.state.lastCleanup || 0;
    const cleanupInterval = 24 * 60 * 60 * 1000; // –†–∞–∑ –≤ –¥–µ–Ω—å
    return (Date.now() - lastCleanup) > cleanupInterval;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStatistics() {
    const totalUserNotes = Object.values(this.state.userNoteStates)
      .reduce((sum, userNotes) => sum + Object.keys(userNotes).length, 0);
    
    return {
      totalChecks: this.state.totalChecks,
      totalNotesProcessed: this.state.totalNotesProcessed,
      emptyChecksCount: this.state.emptyChecksCount,
      totalTrackedNotes: totalUserNotes,
      lastActivity: this.state.lastActivity,
      lastCheck: this.state.lastCheck,
      lastCleanup: this.state.lastCleanup
    };
  }

  // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  resetStatistics() {
    this.state.totalChecks = 0;
    this.state.totalNotesProcessed = 0;
    this.state.emptyChecksCount = 0;
    this.state.lastActivity = null;
    this.state.lastCheck = null;
    console.log('üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  setPageHash(hash) {
    this.state.pageHash = hash;
  }

  hasPageChanged(currentHash) {
    return this.state.pageHash !== currentHash;
  }
}

module.exports = { StateManager }; 